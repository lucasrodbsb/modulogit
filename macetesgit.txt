Git/Github:

Enviando infos {
    git config --global user.name "Lucas Rodrigues"
    git config --global user.email "lucas.rodd61@gmail.com"
    git config --global core.editor vscode
}

Lendo infos {
    git config core.editor
    git config user.email
    git config user.name
    git config --list (todas as infos)
}

Iniciar repositório {
    *navegue até a pasta que deseja e dê o comando git init
    *após, criará uma pasta oculta chamada .git
    - crie um arquivo chamado README.MD (usado para apresentação)

}

git commit {
    enviar os arquivos que você modificou para o git 
    
    ex.:
        git commit -m "comentário"

        output:
        [master (root-commit) b066e98] first commit
        2 files changed, 43 insertions(+)
        create mode 100644 README.md
        create mode 100644 macetesgit.txt


    git commit -am "comentário" {
        já adiciona os arquivos não sincronizados e commita ao mesmo tempo

        output:
        [master e1c051f] adicionando pastas de teste
        3 files changed, 15 insertions(+), 2 deletions(-)
        create mode 100644 testestete
    }
} 


git log {
    consegue ver todos os commits feitos

    output:
    commit b066e98e0a5342c9409ce19560cb5f18563b9edc (HEAD -> master)
    Author: Lucas Rodrigues <lucas.rodd61@gmail.com>
    Date:   Thu Aug 18 15:27:12 2022 -0300

    first commit


    HEAD -> mostra qual branch você está (se está na master ou em alguma outra branch)
}

git status {
    vai varrer a pasta verificar o que foi modificado;
} 

Adicionando arquivos no git {
    git add nomeArquivo 

    ou

    git add -A (adiciona todos os arquivos que não foram sincronizados)
}

git branch {
    lista todos os branch existentes no projeto.
    o branch que estiver com um * antes do nome, é o que estamos modificando
}

git reset {
    volta até determinado commit

    exemplo:

    git reset --hard b066e98e0a5342c9409ce19560cb5f18563b9edc

    git reset --soft{
        volta até determinado commit mas ainda tendo acesso aos commits porém sem ter commitado
    }

    git reset --mixed{
        parecido com o -soft, porém precisa dar o git add novamente nos arquivos
    }

    git reset --hard{
        ignora tudo depois de certo commit e volta todos os arquivos até o commit selecionado
    }

    ** mais recomendado usar o -soft quando usado em equipe
}



criando outros branch {
    para criar um novo branch use o comando git branch nomeDaNovaBranch

    para trocar de branch usamos o git checkout nomeDaNovaBranch
}

git diff {
    vai mostrar as alterações mais especificas (detalhadamente)

    git diff --name-only:
    mostra apenas o nome do arquivo modificado

    para verificar mudanças de arquivos especificos:
    git diff index.html


    para voltar as modificações de um arquivo apenas:

    git checkout HEAD -- NomeDoArquivo

    nesse caso, o HEAD vai substituir o nome da branch
}


criando repositório no Github:
    gere o SSH key pelo git bash com o comando:

    ssh-keygen -t rsa -b 4096 -C "lucas.rodd61@gmail.com"

    depois dê um comando:

    git remote add origin https://github.com/seuUserName/nomeDoRepositorioNoGithub.git

    no caso o comando "origin" é o nome que você vai dar pra ele

    git remote {
        mostra o nome do repositorio remoto

        git remote -v {
            mostra mais detalhado
        }
    }

    enviando para o github{
        git push -u origin master

        nesse caso, o "origin" é o lugar aonde eu informo o destino e o "master"
        é qual branch que eu vou enviar

        ao enviar, o cmd vai pedir sua autenticação com o github
    }

;

.gitignore {
    é um arquivo criado para escondermos e ignorarmos ao commitar
}


fetch = puxar as coisas do repositorio remoto pro local;
push = levar as coisas do repositorio local para o remoto;


git revert {
    voltar já commitando e com acesso aos outros commits

    git revert --no-edit 38273918273918271928{
        fazer o commit voltando
    }
}